# Manually generated by Sarah
from django.contrib.postgres.search import SearchVector
from django.db import migrations

def compute_search_vector(apps, schema_editor):
    ProviderSearch = apps.get_model("pages", "Provider")
    ProviderSearch.objects.update(search_vector=SearchVector("firstName", "lastName", "phone_number", "specialization", "address", "city", "state", "zip_code", "facility_name"))

class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0017_provider_search_vector'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
            CREATE TRIGGER search_vector_trigger
            BEFORE INSERT OR UPDATE OF "firstName", "lastName", "phone_number", "specialization", "address", "city", "state", "zip_code", "facility_name", "search_vector"
            ON pages_provider
            FOR EACH ROW EXECUTE PROCEDURE
            tsvector_update_trigger(
                search_vector, 'pg_catalog.english', "firstName", "lastName", "phone_number", "specialization", "address", "city", "state", "zip_code", "facility_name"
            );
            UPDATE pages_provider SET search_vector = NULL;
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS search_vector_trigger
            ON pages_provider;
            """,
        ),
        migrations.RunPython(
            compute_search_vector, reverse_code=migrations.RunPython.noop
        ),
    ]
